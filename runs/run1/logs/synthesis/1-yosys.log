
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)

[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `exec' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: /openLANE_flow/designs/alu32/src/alu32.v
Parsing SystemVerilog input from `/openLANE_flow/designs/alu32/src/alu32.v' to AST representation.
Generating RTLIL representation for module `\alu32'.
Note: Assuming pure combinatorial block at /openLANE_flow/designs/alu32/src/alu32.v:7.1-31.4 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

2. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/alu32/runs/run3/tmp/synthesis/hierarchy.dot'.
Dumping module alu32 to page 1.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \alu32

3.2. Analyzing design hierarchy..
Top module:  \alu32
Removed 0 unused modules.

4. Executing TRIBUF pass.

5. Executing SYNTH pass.

5.1. Executing HIERARCHY pass (managing design hierarchy).

5.1.1. Analyzing design hierarchy..
Top module:  \alu32

5.1.2. Analyzing design hierarchy..
Top module:  \alu32
Removed 0 unused modules.

5.2. Executing PROC pass (convert processes to netlists).

5.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

5.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 1 dead cases from process $proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1 in module alu32.
Marked 3 switch rules as full_case in process $proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1 in module alu32.
Removed a total of 1 dead cases.

5.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

5.2.4. Executing PROC_INIT pass (extract init attributes).

5.2.5. Executing PROC_ARST pass (detect async resets in processes).

5.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu32.$proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1'.
     1/3: $3\Result[63:0]
     2/3: $2\Result[63:0]
     3/3: $1\Result[63:0]

5.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu32.\Result' from process `\alu32.$proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1'.

5.2.8. Executing PROC_DFF pass (convert process syncs to FFs).

5.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

5.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\alu32.$proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1'.
Removing empty process `alu32.$proc$/openLANE_flow/designs/alu32/src/alu32.v:7$1'.
Cleaned up 3 empty switches.

5.3. Executing FLATTEN pass (flatten design).

5.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.
<suppressed ~5 debug messages>

5.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 1 unused cells and 11 unused wires.
<suppressed ~3 debug messages>

5.6. Executing CHECK pass (checking for obvious problems).
Checking module alu32...
Found and reported 0 problems.

5.7. Executing OPT pass (performing simple optimizations).

5.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

5.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $procmux$18.
    dead port 2/2 on $mux $procmux$21.
    dead port 2/2 on $mux $procmux$33.
Removed 3 multiplexer ports.
<suppressed ~1 debug messages>

5.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

5.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.7.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

5.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.7.9. Rerunning OPT passes. (Maybe there is more to do..)

5.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

5.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.7.13. Executing OPT_DFF pass (perform DFF optimizations).

5.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.7.16. Finished OPT passes. (There is nothing left to do.)

5.8. Executing FSM pass (extract and optimize FSM).

5.8.1. Executing FSM_DETECT pass (finding FSMs in design).

5.8.2. Executing FSM_EXTRACT pass (extracting FSM from design).

5.8.3. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.8.5. Executing FSM_OPT pass (simple optimizations of FSMs).

5.8.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

5.8.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

5.8.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

5.9. Executing OPT pass (performing simple optimizations).

5.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

5.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.9.6. Executing OPT_DFF pass (perform DFF optimizations).

5.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.9.9. Finished OPT passes. (There is nothing left to do.)

5.10. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 64) from port Y of cell alu32.$add$/openLANE_flow/designs/alu32/src/alu32.v:16$3 ($add).
Removed top 31 bits (of 64) from port Y of cell alu32.$sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4 ($sub).
Removed top 30 bits (of 32) from port B of cell alu32.$add$/openLANE_flow/designs/alu32/src/alu32.v:18$5 ($add).
Removed top 31 bits (of 64) from port Y of cell alu32.$add$/openLANE_flow/designs/alu32/src/alu32.v:18$5 ($add).
Removed top 30 bits (of 32) from port B of cell alu32.$sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6 ($sub).
Removed top 31 bits (of 64) from port Y of cell alu32.$sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6 ($sub).
Removed top 32 bits (of 64) from port A of cell alu32.$not$/openLANE_flow/designs/alu32/src/alu32.v:26$9 ($not).
Removed top 32 bits (of 64) from port Y of cell alu32.$or$/openLANE_flow/designs/alu32/src/alu32.v:27$10 ($or).
Removed top 32 bits (of 64) from port Y of cell alu32.$and$/openLANE_flow/designs/alu32/src/alu32.v:28$11 ($and).
Removed top 63 bits (of 64) from mux cell alu32.$procmux$16 ($mux).
Removed top 1 bits (of 3) from port B of cell alu32.$procmux$28_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell alu32.$procmux$29_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell alu32.$procmux$30_CMP0 ($eq).
Removed cell alu32.$procmux$36 ($mux).
Removed top 63 bits (of 64) from wire alu32.$3\Result[63:0].

5.11. Executing PEEPOPT pass (run peephole optimizers).

5.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

5.13. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu32:
  creating $macc model for $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3 ($add).
  creating $macc model for $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5 ($add).
  creating $macc model for $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4 ($sub).
  creating $macc model for $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6 ($sub).
  creating $alu model for $macc $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6.
  creating $alu model for $macc $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4.
  creating $alu model for $macc $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5.
  creating $alu model for $macc $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3.
  creating $alu cell for $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5: $auto$alumacc.cc:485:replace_alu$39
  creating $alu cell for $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3: $auto$alumacc.cc:485:replace_alu$42
  creating $alu cell for $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4: $auto$alumacc.cc:485:replace_alu$45
  creating $alu cell for $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6: $auto$alumacc.cc:485:replace_alu$48
  created 4 $alu and 0 $macc cells.

5.14. Executing SHARE pass (SAT-based resource sharing).

5.15. Executing OPT pass (performing simple optimizations).

5.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.15.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.15.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

5.15.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.15.6. Executing OPT_DFF pass (perform DFF optimizations).

5.15.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.15.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.15.9. Finished OPT passes. (There is nothing left to do.)

5.16. Executing MEMORY pass.

5.16.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

5.16.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

5.16.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.16.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

5.16.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.16.6. Executing MEMORY_COLLECT pass (generating $mem cells).

5.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.18. Executing OPT pass (performing simple optimizations).

5.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.
<suppressed ~5 debug messages>

5.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.18.3. Executing OPT_DFF pass (perform DFF optimizations).

5.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

5.18.5. Finished fast OPT passes.

5.19. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

5.20. Executing OPT pass (performing simple optimizations).

5.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

5.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
    Consolidated identical input bits for $pmux cell $procmux$23:
      Old ports: A={ $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [31:0] }, B={ $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [31:0] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [31:0] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [31:0] 63'000000000000000000000000000000000000000000000000000000000000000 $3\Result[63:0] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [30:0] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [30:0] }, Y=\Result
      New ports: A={ $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:16$3_Y [31:0] }, B={ $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:17$4_Y [31:0] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [63] $add$/openLANE_flow/designs/alu32/src/alu32.v:18$5_Y [31:0] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [63] $sub$/openLANE_flow/designs/alu32/src/alu32.v:19$6_Y [31:0] 32'00000000000000000000000000000000 $3\Result[63:0] $auto$opt_expr.cc:205:group_cell_inputs$51 [31] $auto$opt_expr.cc:205:group_cell_inputs$51 $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [63] $or$/openLANE_flow/designs/alu32/src/alu32.v:27$10_Y [30:0] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [63] $and$/openLANE_flow/designs/alu32/src/alu32.v:28$11_Y [30:0] }, Y=\Result [32:0]
      New connections: \Result [63:33] = { \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] \Result [32] }
  Optimizing cells in module \alu32.
Performed a total of 1 changes.

5.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.20.6. Executing OPT_SHARE pass.
    Found cells that share an operand and can be merged by moving the $pmux $procmux$23 in front of them:
        $auto$alumacc.cc:485:replace_alu$48
        $auto$alumacc.cc:485:replace_alu$39
        $auto$alumacc.cc:485:replace_alu$45
        $auto$alumacc.cc:485:replace_alu$42

5.20.7. Executing OPT_DFF pass (perform DFF optimizations).

5.20.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 12 unused wires.
<suppressed ~1 debug messages>

5.20.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.
<suppressed ~1 debug messages>

5.20.10. Rerunning OPT passes. (Maybe there is more to do..)

5.20.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.20.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
    New ctrl vector for $pmux cell $procmux$23: { $procmux$19_CMP $procmux$26_CMP $procmux$25_CMP $procmux$24_CMP }
  Optimizing cells in module \alu32.
Performed a total of 1 changes.

5.20.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.20.14. Executing OPT_SHARE pass.

5.20.15. Executing OPT_DFF pass (perform DFF optimizations).

5.20.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

5.20.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.20.18. Rerunning OPT passes. (Maybe there is more to do..)

5.20.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

5.20.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

5.20.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.20.22. Executing OPT_SHARE pass.

5.20.23. Executing OPT_DFF pass (perform DFF optimizations).

5.20.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

5.20.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.20.26. Finished OPT passes. (There is nothing left to do.)

5.21. Executing TECHMAP pass (map to technology primitives).

5.21.1. Executing Verilog-2005 frontend: /build/bin/../share/yosys/techmap.v
Parsing Verilog input from `/build/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

5.21.2. Continuing TECHMAP pass.
Using template $paramod$d66c0c83f9528c9adf60e2a80608da39a3d0cbbb\_90_pmux for cells of type $pmux.
Using template $paramod$a691feaaa4057ac1dca2dde6422492424f55d2f9\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using template $paramod$11df5d6caf6afa57cdc250a876f1c13508769c4f\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $not.
Running "alumacc" on wrapper $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=33:Y_WIDTH=33:394426c56d1a028ba8fdd5469b163e04011def47.
Using template $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=33:Y_WIDTH=33:394426c56d1a028ba8fdd5469b163e04011def47 for cells of type $extern:wrap:$neg:A_SIGNED=1:A_WIDTH=33:Y_WIDTH=33:394426c56d1a028ba8fdd5469b163e04011def47.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000100001 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using template $paramod$e3e2a2ae1e4d598b5e0e0be67cc1104653ecf8c1\_90_alu for cells of type $alu.
No more expansions possible.
<suppressed ~671 debug messages>

5.22. Executing OPT pass (performing simple optimizations).

5.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.
<suppressed ~407 debug messages>

5.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
<suppressed ~63 debug messages>
Removed a total of 21 cells.

5.22.3. Executing OPT_DFF pass (perform DFF optimizations).

5.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 4 unused cells and 425 unused wires.
<suppressed ~5 debug messages>

5.22.5. Finished fast OPT passes.

5.23. Executing ABC pass (technology mapping using ABC).

5.23.1. Extracting gate netlist of module `\alu32' to `<abc-temp-dir>/input.blif'..
Extracted 838 gates and 905 wires to a netlist network with 67 inputs and 33 outputs.

5.23.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

5.23.1.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:      235
ABC RESULTS:               MUX cells:       65
ABC RESULTS:              NAND cells:       46
ABC RESULTS:               NOR cells:       94
ABC RESULTS:               NOT cells:       34
ABC RESULTS:                OR cells:      180
ABC RESULTS:             ORNOT cells:       10
ABC RESULTS:              XNOR cells:       10
ABC RESULTS:               XOR cells:       87
ABC RESULTS:        internal signals:      805
ABC RESULTS:           input signals:       67
ABC RESULTS:          output signals:       33
Removing temp directory.

5.24. Executing OPT pass (performing simple optimizations).

5.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

5.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

5.24.3. Executing OPT_DFF pass (perform DFF optimizations).

5.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 305 unused wires.
<suppressed ~1 debug messages>

5.24.5. Finished fast OPT passes.

5.25. Executing HIERARCHY pass (managing design hierarchy).

5.25.1. Analyzing design hierarchy..
Top module:  \alu32

5.25.2. Analyzing design hierarchy..
Top module:  \alu32
Removed 0 unused modules.

5.26. Printing statistics.

=== alu32 ===

   Number of wires:                733
   Number of wire bits:            860
   Number of public wires:           5
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                761
     $_ANDNOT_                     235
     $_MUX_                         65
     $_NAND_                        46
     $_NOR_                         94
     $_NOT_                         34
     $_ORNOT_                       10
     $_OR_                         180
     $_XNOR_                        10
     $_XOR_                         87

5.27. Executing CHECK pass (checking for obvious problems).
Checking module alu32...
Found and reported 0 problems.

6. Generating Graphviz representation of design.
Writing dot description to `/openLANE_flow/designs/alu32/runs/run3/tmp/synthesis/post_techmap.dot'.
Dumping module alu32 to page 1.

7. Executing SHARE pass (SAT-based resource sharing).

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu32..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu32.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu32'.
Removed a total of 0 cells.

8.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu32.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..

10. Printing statistics.

=== alu32 ===

   Number of wires:                733
   Number of wire bits:            860
   Number of public wires:           5
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                761
     $_ANDNOT_                     235
     $_MUX_                         65
     $_NAND_                        46
     $_NOR_                         94
     $_NOT_                         34
     $_ORNOT_                       10
     $_OR_                         180
     $_XNOR_                        10
     $_XOR_                         87

mapping tbuf

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v
Parsing Verilog input from `/home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/tribuff_map.v' to AST representation.
Generating RTLIL representation for module `\$_TBUF_'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

12. Executing SIMPLEMAP pass (map simple cells to gate primitives).

13. Executing MUXCOVER pass (mapping to wider MUXes).
Covering MUX trees in module alu32..
  Treeifying 65 MUXes:
    Found tree with 1 MUXes at root \Result [0].
    Found tree with 1 MUXes at root \Result [1].
    Found tree with 1 MUXes at root \Result [2].
    Found tree with 1 MUXes at root \Result [3].
    Found tree with 1 MUXes at root \Result [4].
    Found tree with 1 MUXes at root \Result [5].
    Found tree with 1 MUXes at root \Result [6].
    Found tree with 1 MUXes at root \Result [7].
    Found tree with 1 MUXes at root \Result [8].
    Found tree with 1 MUXes at root \Result [9].
    Found tree with 1 MUXes at root \Result [10].
    Found tree with 1 MUXes at root \Result [11].
    Found tree with 1 MUXes at root \Result [12].
    Found tree with 1 MUXes at root \Result [13].
    Found tree with 1 MUXes at root \Result [14].
    Found tree with 1 MUXes at root \Result [15].
    Found tree with 1 MUXes at root \Result [16].
    Found tree with 1 MUXes at root \Result [17].
    Found tree with 1 MUXes at root \Result [18].
    Found tree with 1 MUXes at root \Result [19].
    Found tree with 1 MUXes at root \Result [20].
    Found tree with 1 MUXes at root \Result [21].
    Found tree with 1 MUXes at root \Result [22].
    Found tree with 1 MUXes at root \Result [23].
    Found tree with 1 MUXes at root \Result [24].
    Found tree with 1 MUXes at root \Result [25].
    Found tree with 1 MUXes at root \Result [26].
    Found tree with 1 MUXes at root \Result [27].
    Found tree with 1 MUXes at root \Result [28].
    Found tree with 1 MUXes at root \Result [29].
    Found tree with 1 MUXes at root \Result [30].
    Found tree with 1 MUXes at root \Result [31].
    Found tree with 1 MUXes at root \Result [63].
    Found tree with 1 MUXes at root $abc$1876$new_n782_.
    Found tree with 1 MUXes at root $abc$1876$new_n757_.
    Found tree with 1 MUXes at root $abc$1876$new_n714_.
    Found tree with 1 MUXes at root $abc$1876$new_n692_.
    Found tree with 1 MUXes at root $abc$1876$new_n643_.
    Found tree with 1 MUXes at root $abc$1876$new_n665_.
    Found tree with 1 MUXes at root $abc$1876$new_n621_.
    Found tree with 1 MUXes at root $abc$1876$new_n601_.
    Found tree with 1 MUXes at root $abc$1876$new_n736_.
    Found tree with 1 MUXes at root $abc$1876$new_n265_.
    Found tree with 1 MUXes at root $abc$1876$new_n245_.
    Found tree with 1 MUXes at root $abc$1876$new_n308_.
    Found tree with 1 MUXes at root $abc$1876$new_n223_.
    Found tree with 1 MUXes at root $abc$1876$new_n287_.
    Found tree with 1 MUXes at root $abc$1876$new_n203_.
    Found tree with 1 MUXes at root $abc$1876$new_n184_.
    Found tree with 1 MUXes at root $abc$1876$new_n166_.
    Found tree with 1 MUXes at root $abc$1876$new_n844_.
    Found tree with 1 MUXes at root $abc$1876$new_n575_.
    Found tree with 1 MUXes at root $abc$1876$new_n484_.
    Found tree with 1 MUXes at root $abc$1876$new_n421_.
    Found tree with 1 MUXes at root $abc$1876$new_n533_.
    Found tree with 1 MUXes at root $abc$1876$new_n353_.
    Found tree with 1 MUXes at root $abc$1876$new_n441_.
    Found tree with 1 MUXes at root $abc$1876$new_n555_.
    Found tree with 1 MUXes at root $abc$1876$new_n463_.
    Found tree with 1 MUXes at root $abc$1876$new_n513_.
    Found tree with 1 MUXes at root $abc$1876$new_n395_.
    Found tree with 1 MUXes at root $abc$1876$new_n333_.
    Found tree with 1 MUXes at root $abc$1876$new_n375_.
    Found tree with 1 MUXes at root $abc$1876$new_n802_.
    Found tree with 1 MUXes at root $abc$1876$new_n824_.
    Finished treeification: Found 65 trees.
  Covering trees:
    Replaced tree at \Result [0]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [1]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [2]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [3]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [4]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [5]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [6]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [7]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [8]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [9]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [10]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [11]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [12]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [13]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [14]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [15]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [16]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [17]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [18]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [19]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [20]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [21]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [22]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [23]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [24]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [25]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [26]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [27]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [28]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [29]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [30]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [31]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at \Result [63]: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n782_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n757_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n714_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n692_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n643_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n665_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n621_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n601_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n736_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n265_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n245_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n308_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n223_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n287_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n203_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n184_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n166_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n844_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n575_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n484_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n421_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n533_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n353_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n441_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n555_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n463_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n513_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n395_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n333_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n375_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n802_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
    Replaced tree at $abc$1876$new_n824_: 1 MUX2, 0 MUX4, 0 MUX8, 0 MUX16
  Added a total of 0 decoder MUXes.
<suppressed ~1106 debug messages>

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v
Parsing Verilog input from `/home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux4_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX4_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

15. Executing SIMPLEMAP pass (map simple cells to gate primitives).

16. Executing TECHMAP pass (map to technology primitives).

16.1. Executing Verilog-2005 frontend: /home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v
Parsing Verilog input from `/home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/mux2_map.v' to AST representation.
Generating RTLIL representation for module `\$_MUX_'.
Successfully finished Verilog frontend.

16.2. Continuing TECHMAP pass.
Using template \$_MUX_ for cells of type $_MUX_.
No more expansions possible.
<suppressed ~68 debug messages>

17. Executing SIMPLEMAP pass (map simple cells to gate primitives).

18. Executing TECHMAP pass (map to technology primitives).

18.1. Executing Verilog-2005 frontend: /home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v
Parsing Verilog input from `/home/rohith/vlsi/OpenLane/pdks/sky130A/libs.tech/openlane/sky130_fd_sc_hd/latch_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

18.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

19. Executing SIMPLEMAP pass (map simple cells to gate primitives).

20. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell sky130_fd_sc_hd__dfxtp_2 (noninv, pins=3, area=21.27) is a direct match for cell type $_DFF_P_.
  cell sky130_fd_sc_hd__dfrtp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN0_.
  cell sky130_fd_sc_hd__dfstp_2 (noninv, pins=4, area=26.28) is a direct match for cell type $_DFF_PN1_.
  cell sky130_fd_sc_hd__dfbbn_2 (noninv, pins=6, area=35.03) is a direct match for cell type $_DFFSR_NNN_.
  final dff cell mappings:
    unmapped dff cell: $_DFF_N_
    \sky130_fd_sc_hd__dfxtp_2 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    \sky130_fd_sc_hd__dfrtp_2 _DFF_PN0_ (.CLK( C), .D( D), .Q( Q), .RESET_B( R));
    \sky130_fd_sc_hd__dfstp_2 _DFF_PN1_ (.CLK( C), .D( D), .Q( Q), .SET_B( R));
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    \sky130_fd_sc_hd__dfbbn_2 _DFFSR_NNN_ (.CLK_N( C), .D( D), .Q( Q), .Q_N(~Q), .RESET_B( R), .SET_B( S));
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    unmapped dff cell: $_DFFSR_PNN_
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

20.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\alu32':

21. Printing statistics.

=== alu32 ===

   Number of wires:                993
   Number of wire bits:           1120
   Number of public wires:           5
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                761
     $_ANDNOT_                     235
     $_NAND_                        46
     $_NOR_                         94
     $_NOT_                         34
     $_ORNOT_                       10
     $_OR_                         180
     $_XNOR_                        10
     $_XOR_                         87
     sky130_fd_sc_hd__mux2_1        65

[INFO]: ABC: WireLoad : S_4

22. Executing ABC pass (technology mapping using ABC).

22.1. Extracting gate netlist of module `\alu32' to `/tmp/yosys-abc-JwIsYZ/input.blif'..
Extracted 696 gates and 795 wires to a netlist network with 99 inputs and 130 outputs.

22.1.1. Executing ABC.
Running ABC command: /build/bin/yosys-abc -s -f /tmp/yosys-abc-JwIsYZ/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-JwIsYZ/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-JwIsYZ/input.blif 
ABC: + read_lib -w /openLANE_flow/designs/alu32/runs/run3/tmp/trimmed.lib 
ABC: Parsing finished successfully.  Parsing time =     0.14 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfbbn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfrtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfsbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfstp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxbp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dfxtp_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtn_4".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "sky130_fd_sc_hd__dlxtp_1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "sky130_fd_sc_hd__ebufn_8".
ABC: Library "sky130_fd_sc_hd__tt_025C_1v80" from "/openLANE_flow/designs/alu32/runs/run3/tmp/trimmed.lib" has 175 cells (17 skipped: 14 seq; 3 tri-state; 0 no func; 0 dont_use).  Time =     0.20 sec
ABC: Memory =    7.77 MB. Time =     0.20 sec
ABC: Warning: Detected 2 multi-output gates (for example, "sky130_fd_sc_hd__fa_1").
ABC: + read_constr -v /openLANE_flow/designs/alu32/runs/run3/tmp/synthesis/yosys.sdc 
ABC: Setting driving cell to be "sky130_fd_sc_hd__inv_8".
ABC: Setting output load to be 17.650000.
ABC: + read_constr /openLANE_flow/designs/alu32/runs/run3/tmp/synthesis/yosys.sdc 
ABC: + fx 
ABC: + mfs 
ABC: + strash 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + retime -D -D 10000.0 -M 5 
ABC: + scleanup 
ABC: Error: The network is combinational.
ABC: + fraig_store 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + balance 
ABC: + rewrite 
ABC: + refactor 
ABC: + balance 
ABC: + rewrite 
ABC: + rewrite -z 
ABC: + balance 
ABC: + refactor -z 
ABC: + rewrite -z 
ABC: + balance 
ABC: + fraig_store 
ABC: + fraig_restore 
ABC: + amap -m -Q 0.1 -F 20 -A 20 -C 5000 
ABC: + retime -D -D 10000.0 
ABC: + buffer -N 7 -S 1000.0 
ABC: Node 343 has dup fanin 340.
ABC: Node 343 has dup fanin 342.
ABC: Node 343 has dup fanin 340.
ABC: Node 343 has dup fanin 342.
ABC: Node 353 has dup fanin 350.
ABC: Node 353 has dup fanin 352.
ABC: Node 353 has dup fanin 350.
ABC: Node 353 has dup fanin 352.
ABC: Node 362 has dup fanin 359.
ABC: Node 362 has dup fanin 361.
ABC: Node 362 has dup fanin 359.
ABC: Node 362 has dup fanin 361.
ABC: Node 372 has dup fanin 370.
ABC: Node 372 has dup fanin 371.
ABC: Node 372 has dup fanin 370.
ABC: Node 372 has dup fanin 371.
ABC: Node 380 has dup fanin 378.
ABC: Node 380 has dup fanin 379.
ABC: Node 380 has dup fanin 378.
ABC: Node 380 has dup fanin 379.
ABC: Node 388 has dup fanin 386.
ABC: Node 388 has dup fanin 387.
ABC: Node 388 has dup fanin 386.
ABC: Node 388 has dup fanin 387.
ABC: Node 400 has dup fanin 14.
ABC: Node 400 has dup fanin 52.
ABC: Node 400 has dup fanin 14.
ABC: Node 400 has dup fanin 52.
ABC: Node 423 has dup fanin 420.
ABC: Node 423 has dup fanin 422.
ABC: Node 423 has dup fanin 420.
ABC: Node 423 has dup fanin 422.
ABC: Node 446 has dup fanin 439.
ABC: Node 446 has dup fanin 445.
ABC: Node 446 has dup fanin 439.
ABC: Node 446 has dup fanin 445.
ABC: Node 466 has dup fanin 463.
ABC: Node 466 has dup fanin 465.
ABC: Node 466 has dup fanin 463.
ABC: Node 466 has dup fanin 465.
ABC: Node 475 has dup fanin 473.
ABC: Node 475 has dup fanin 474.
ABC: Node 475 has dup fanin 473.
ABC: Node 475 has dup fanin 474.
ABC: Node 487 has dup fanin 246.
ABC: Node 487 has dup fanin 68.
ABC: Node 487 has dup fanin 246.
ABC: Node 487 has dup fanin 68.
ABC: Node 509 has dup fanin 506.
ABC: Node 509 has dup fanin 508.
ABC: Node 509 has dup fanin 506.
ABC: Node 509 has dup fanin 508.
ABC: Node 533 has dup fanin 526.
ABC: Node 533 has dup fanin 532.
ABC: Node 533 has dup fanin 526.
ABC: Node 533 has dup fanin 532.
ABC: Node 553 has dup fanin 550.
ABC: Node 553 has dup fanin 552.
ABC: Node 553 has dup fanin 550.
ABC: Node 553 has dup fanin 552.
ABC: Node 559 has dup fanin 27.
ABC: Node 559 has dup fanin 82.
ABC: Node 559 has dup fanin 27.
ABC: Node 559 has dup fanin 82.
ABC: Node 561 has dup fanin 559.
ABC: Node 561 has dup fanin 560.
ABC: Node 561 has dup fanin 559.
ABC: Node 561 has dup fanin 560.
ABC: Node 575 has dup fanin 572.
ABC: Node 575 has dup fanin 574.
ABC: Node 575 has dup fanin 572.
ABC: Node 575 has dup fanin 574.
ABC: Node 584 has dup fanin 582.
ABC: Node 584 has dup fanin 583.
ABC: Node 584 has dup fanin 582.
ABC: Node 584 has dup fanin 583.
ABC: Node 593 has dup fanin 591.
ABC: Node 593 has dup fanin 592.
ABC: Node 593 has dup fanin 591.
ABC: Node 593 has dup fanin 592.
ABC: Node 601 has dup fanin 599.
ABC: Node 601 has dup fanin 600.
ABC: Node 601 has dup fanin 599.
ABC: Node 601 has dup fanin 600.
ABC: Node 613 has dup fanin 34.
ABC: Node 613 has dup fanin 92.
ABC: Node 613 has dup fanin 34.
ABC: Node 613 has dup fanin 92.
ABC: Node 614 has dup fanin 612.
ABC: Node 614 has dup fanin 613.
ABC: Node 614 has dup fanin 612.
ABC: Node 614 has dup fanin 613.
ABC: Node 621 has dup fanin 33.
ABC: Node 621 has dup fanin 94.
ABC: Node 621 has dup fanin 33.
ABC: Node 621 has dup fanin 94.
ABC: Node 623 has dup fanin 621.
ABC: Node 623 has dup fanin 622.
ABC: Node 623 has dup fanin 621.
ABC: Node 623 has dup fanin 622.
ABC: Node 630 has dup fanin 36.
ABC: Node 630 has dup fanin 96.
ABC: Node 630 has dup fanin 36.
ABC: Node 630 has dup fanin 96.
ABC: Node 633 has dup fanin 630.
ABC: Node 633 has dup fanin 632.
ABC: Node 633 has dup fanin 630.
ABC: Node 633 has dup fanin 632.
ABC: Node 640 has dup fanin 35.
ABC: Node 640 has dup fanin 98.
ABC: Node 640 has dup fanin 35.
ABC: Node 640 has dup fanin 98.
ABC: Node 642 has dup fanin 640.
ABC: Node 642 has dup fanin 641.
ABC: Node 642 has dup fanin 640.
ABC: Node 642 has dup fanin 641.
ABC: Node 647 has dup fanin 255.
ABC: Node 647 has dup fanin 99.
ABC: Node 647 has dup fanin 255.
ABC: Node 647 has dup fanin 99.
ABC: Node 648 has dup fanin 646.
ABC: Node 648 has dup fanin 647.
ABC: Node 648 has dup fanin 646.
ABC: Node 648 has dup fanin 647.
ABC: + upsize -D 10000.0 
ABC: Current delay (7673.95 ps) does not exceed the target delay (10000.00 ps). Upsizing is not performed.
ABC: + dnsize -D 10000.0 
ABC: + stime -p 
ABC: WireLoad = "none"  Gates =    452 ( 29.9 %)   Cap = 11.4 ff (  4.6 %)   Area =     3776.12 ( 70.1 %)   Delay =  8017.43 ps  (  5.5 %)               
ABC: Path  0 --       5 : 0    2 pi                      A =   0.00  Df =   8.1   -5.6 ps  S =  20.1 ps  Cin =  0.0 ff  Cout =   6.2 ff  Cmax =   0.0 ff  G =    0  
ABC: Path  1 --     266 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df = 300.8 -184.4 ps  S =  70.9 ps  Cin =  1.5 ff  Cout =   8.5 ff  Cmax = 299.4 ff  G =  562  
ABC: Path  2 --     282 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df = 588.2 -363.7 ps  S =  61.9 ps  Cin =  1.5 ff  Cout =   5.3 ff  Cmax = 299.4 ff  G =  348  
ABC: Path  3 --     293 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df = 875.5 -545.5 ps  S =  64.1 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 299.4 ff  G =  404  
ABC: Path  4 --     305 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df =1173.1 -727.3 ps  S =  70.5 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 299.4 ff  G =  558  
ABC: Path  5 --     316 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df =1463.7 -906.6 ps  S =  64.0 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 299.4 ff  G =  404  
ABC: Path  6 --     331 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df =1761.5-1088.4 ps  S =  70.6 ps  Cin =  1.5 ff  Cout =   8.5 ff  Cmax = 299.4 ff  G =  562  
ABC: Path  7 --     341 : 2    4 sky130_fd_sc_hd__or2_2  A =   6.26  Df =2066.6-1267.5 ps  S =  73.9 ps  Cin =  1.5 ff  Cout =  10.0 ff  Cmax = 299.4 ff  G =  652  
ABC: Path  8 --     370 : 3    3 sky130_fd_sc_hd__or3_2  A =   7.51  Df =2507.8-1583.5 ps  S =  95.8 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 310.4 ff  G =  533  
ABC: Path  9 --     383 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df =2808.1-1772.9 ps  S =  64.0 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 299.4 ff  G =  404  
ABC: Path 10 --     397 : 2    4 sky130_fd_sc_hd__or2_2  A =   6.26  Df =3130.7-1952.9 ps  S =  91.9 ps  Cin =  1.5 ff  Cout =  15.8 ff  Cmax = 299.4 ff  G = 1035  
ABC: Path 11 --     429 : 3    4 sky130_fd_sc_hd__or3_2  A =   7.51  Df =3599.5-2268.5 ps  S = 110.7 ps  Cin =  1.5 ff  Cout =  13.2 ff  Cmax = 310.4 ff  G =  824  
ABC: Path 12 --     455 : 3    5 sky130_fd_sc_hd__or3_2  A =   7.51  Df =4089.4-2597.4 ps  S = 120.7 ps  Cin =  1.5 ff  Cout =  17.2 ff  Cmax = 310.4 ff  G = 1078  
ABC: Path 13 --     512 : 4    4 sky130_fd_sc_hd__or4_2  A =   8.76  Df =4716.9-3059.2 ps  S = 147.6 ps  Cin =  1.5 ff  Cout =  15.8 ff  Cmax = 310.4 ff  G = 1002  
ABC: Path 14 --     543 : 3    4 sky130_fd_sc_hd__or3_2  A =   7.51  Df =5206.0-3395.8 ps  S = 110.7 ps  Cin =  1.5 ff  Cout =  13.2 ff  Cmax = 310.4 ff  G =  824  
ABC: Path 15 --     572 : 3    4 sky130_fd_sc_hd__or3_2  A =   7.51  Df =5681.9-3724.3 ps  S = 110.8 ps  Cin =  1.5 ff  Cout =  13.2 ff  Cmax = 310.4 ff  G =  824  
ABC: Path 16 --     598 : 3    3 sky130_fd_sc_hd__or3_2  A =   7.51  Df =6134.8-4047.0 ps  S =  95.8 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 310.4 ff  G =  533  
ABC: Path 17 --     609 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df =6435.1-4236.5 ps  S =  64.0 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 299.4 ff  G =  404  
ABC: Path 18 --     622 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df =6732.6-4418.3 ps  S =  70.5 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 299.4 ff  G =  558  
ABC: Path 19 --     632 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df =7023.2-4597.7 ps  S =  64.1 ps  Cin =  1.5 ff  Cout =   6.1 ff  Cmax = 299.4 ff  G =  404  
ABC: Path 20 --     647 : 2    3 sky130_fd_sc_hd__or2_2  A =   6.26  Df =7320.8-4779.5 ps  S =  70.5 ps  Cin =  1.5 ff  Cout =   8.4 ff  Cmax = 299.4 ff  G =  558  
ABC: Path 21 --     655 : 2    2 sky130_fd_sc_hd__or2_2  A =   6.26  Df =7615.4-4958.8 ps  S =  66.7 ps  Cin =  1.5 ff  Cout =   7.2 ff  Cmax = 299.4 ff  G =  473  
ABC: Path 22 --     669 : 3    1 sky130_fd_sc_hd__o21a_2 A =   8.76  Df =8017.4 -162.5 ps  S = 104.2 ps  Cin =  2.4 ff  Cout =  17.6 ff  Cmax = 294.8 ff  G =  740  
ABC: Start-point = pi4 (\B [0]).  End-point = po124 ($abc$1876$new_n821_).
ABC: + print_stats -m 
ABC: netlist                       : i/o =   99/  130  lat =    0  nd =   452  edge =   1304  area =3775.67  delay =24.00  lev = 24
ABC: + write_blif /tmp/yosys-abc-JwIsYZ/output.blif 

22.1.2. Re-integrating ABC results.
ABC RESULTS:   sky130_fd_sc_hd__a2111o_2 cells:       22
ABC RESULTS:   sky130_fd_sc_hd__a211o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a21bo_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a21o_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__a21oi_2 cells:        7
ABC RESULTS:   sky130_fd_sc_hd__a221o_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__a22o_2 cells:       15
ABC RESULTS:   sky130_fd_sc_hd__a2bb2o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a2bb2oi_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__a31o_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__a31oi_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__a32o_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__a41o_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__buf_1 cells:       33
ABC RESULTS:   sky130_fd_sc_hd__inv_2 cells:      102
ABC RESULTS:   sky130_fd_sc_hd__nand2_2 cells:        3
ABC RESULTS:   sky130_fd_sc_hd__nor2_2 cells:       14
ABC RESULTS:   sky130_fd_sc_hd__nor3_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__nor4_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2111a_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o2111ai_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__o211a_2 cells:        4
ABC RESULTS:   sky130_fd_sc_hd__o21a_2 cells:       35
ABC RESULTS:   sky130_fd_sc_hd__o21ai_2 cells:       23
ABC RESULTS:   sky130_fd_sc_hd__o221ai_2 cells:       32
ABC RESULTS:   sky130_fd_sc_hd__o22a_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__o22ai_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__o2bb2a_2 cells:       19
ABC RESULTS:   sky130_fd_sc_hd__o2bb2ai_2 cells:        1
ABC RESULTS:   sky130_fd_sc_hd__o32a_2 cells:        2
ABC RESULTS:   sky130_fd_sc_hd__or2_2 cells:       24
ABC RESULTS:   sky130_fd_sc_hd__or3_2 cells:       11
ABC RESULTS:   sky130_fd_sc_hd__or4_2 cells:       13
ABC RESULTS:   sky130_fd_sc_hd__or4b_2 cells:        2
ABC RESULTS:        internal signals:      566
ABC RESULTS:           input signals:       99
ABC RESULTS:          output signals:      130
Removing temp directory.

23. Executing SETUNDEF pass (replace undef values with defined constants).

24. Executing HILOMAP pass (mapping to constant drivers).

25. Executing SPLITNETS pass (splitting up multi-bit signals).

26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu32..
Removed 0 unused cells and 1055 unused wires.
<suppressed ~1 debug messages>

27. Executing INSBUF pass (insert buffer cells for connected wires).
Added alu32.$auto$insbuf.cc:79:execute$3157: \Result [63] -> \Result [32]
Added alu32.$auto$insbuf.cc:79:execute$3158: \Result [63] -> \Result [33]
Added alu32.$auto$insbuf.cc:79:execute$3159: \Result [63] -> \Result [34]
Added alu32.$auto$insbuf.cc:79:execute$3160: \Result [63] -> \Result [35]
Added alu32.$auto$insbuf.cc:79:execute$3161: \Result [63] -> \Result [36]
Added alu32.$auto$insbuf.cc:79:execute$3162: \Result [63] -> \Result [37]
Added alu32.$auto$insbuf.cc:79:execute$3163: \Result [63] -> \Result [38]
Added alu32.$auto$insbuf.cc:79:execute$3164: \Result [63] -> \Result [39]
Added alu32.$auto$insbuf.cc:79:execute$3165: \Result [63] -> \Result [40]
Added alu32.$auto$insbuf.cc:79:execute$3166: \Result [63] -> \Result [41]
Added alu32.$auto$insbuf.cc:79:execute$3167: \Result [63] -> \Result [42]
Added alu32.$auto$insbuf.cc:79:execute$3168: \Result [63] -> \Result [43]
Added alu32.$auto$insbuf.cc:79:execute$3169: \Result [63] -> \Result [44]
Added alu32.$auto$insbuf.cc:79:execute$3170: \Result [63] -> \Result [45]
Added alu32.$auto$insbuf.cc:79:execute$3171: \Result [63] -> \Result [46]
Added alu32.$auto$insbuf.cc:79:execute$3172: \Result [63] -> \Result [47]
Added alu32.$auto$insbuf.cc:79:execute$3173: \Result [63] -> \Result [48]
Added alu32.$auto$insbuf.cc:79:execute$3174: \Result [63] -> \Result [49]
Added alu32.$auto$insbuf.cc:79:execute$3175: \Result [63] -> \Result [50]
Added alu32.$auto$insbuf.cc:79:execute$3176: \Result [63] -> \Result [51]
Added alu32.$auto$insbuf.cc:79:execute$3177: \Result [63] -> \Result [52]
Added alu32.$auto$insbuf.cc:79:execute$3178: \Result [63] -> \Result [53]
Added alu32.$auto$insbuf.cc:79:execute$3179: \Result [63] -> \Result [54]
Added alu32.$auto$insbuf.cc:79:execute$3180: \Result [63] -> \Result [55]
Added alu32.$auto$insbuf.cc:79:execute$3181: \Result [63] -> \Result [56]
Added alu32.$auto$insbuf.cc:79:execute$3182: \Result [63] -> \Result [57]
Added alu32.$auto$insbuf.cc:79:execute$3183: \Result [63] -> \Result [58]
Added alu32.$auto$insbuf.cc:79:execute$3184: \Result [63] -> \Result [59]
Added alu32.$auto$insbuf.cc:79:execute$3185: \Result [63] -> \Result [60]
Added alu32.$auto$insbuf.cc:79:execute$3186: \Result [63] -> \Result [61]
Added alu32.$auto$insbuf.cc:79:execute$3187: \Result [63] -> \Result [62]

28. Executing CHECK pass (checking for obvious problems).
Checking module alu32...
Warning: Wire alu32.\Result [63] is used but has no driver.
Warning: Wire alu32.\Result [62] is used but has no driver.
Warning: Wire alu32.\Result [61] is used but has no driver.
Warning: Wire alu32.\Result [60] is used but has no driver.
Warning: Wire alu32.\Result [59] is used but has no driver.
Warning: Wire alu32.\Result [58] is used but has no driver.
Warning: Wire alu32.\Result [57] is used but has no driver.
Warning: Wire alu32.\Result [56] is used but has no driver.
Warning: Wire alu32.\Result [55] is used but has no driver.
Warning: Wire alu32.\Result [54] is used but has no driver.
Warning: Wire alu32.\Result [53] is used but has no driver.
Warning: Wire alu32.\Result [52] is used but has no driver.
Warning: Wire alu32.\Result [51] is used but has no driver.
Warning: Wire alu32.\Result [50] is used but has no driver.
Warning: Wire alu32.\Result [49] is used but has no driver.
Warning: Wire alu32.\Result [48] is used but has no driver.
Warning: Wire alu32.\Result [47] is used but has no driver.
Warning: Wire alu32.\Result [46] is used but has no driver.
Warning: Wire alu32.\Result [45] is used but has no driver.
Warning: Wire alu32.\Result [44] is used but has no driver.
Warning: Wire alu32.\Result [43] is used but has no driver.
Warning: Wire alu32.\Result [42] is used but has no driver.
Warning: Wire alu32.\Result [41] is used but has no driver.
Warning: Wire alu32.\Result [40] is used but has no driver.
Warning: Wire alu32.\Result [39] is used but has no driver.
Warning: Wire alu32.\Result [38] is used but has no driver.
Warning: Wire alu32.\Result [37] is used but has no driver.
Warning: Wire alu32.\Result [36] is used but has no driver.
Warning: Wire alu32.\Result [35] is used but has no driver.
Warning: Wire alu32.\Result [34] is used but has no driver.
Warning: Wire alu32.\Result [33] is used but has no driver.
Warning: Wire alu32.\Result [32] is used but has no driver.
Warning: Wire alu32.\Result [31] is used but has no driver.
Warning: Wire alu32.\Result [30] is used but has no driver.
Warning: Wire alu32.\Result [29] is used but has no driver.
Warning: Wire alu32.\Result [28] is used but has no driver.
Warning: Wire alu32.\Result [27] is used but has no driver.
Warning: Wire alu32.\Result [26] is used but has no driver.
Warning: Wire alu32.\Result [25] is used but has no driver.
Warning: Wire alu32.\Result [24] is used but has no driver.
Warning: Wire alu32.\Result [23] is used but has no driver.
Warning: Wire alu32.\Result [22] is used but has no driver.
Warning: Wire alu32.\Result [21] is used but has no driver.
Warning: Wire alu32.\Result [20] is used but has no driver.
Warning: Wire alu32.\Result [19] is used but has no driver.
Warning: Wire alu32.\Result [18] is used but has no driver.
Warning: Wire alu32.\Result [17] is used but has no driver.
Warning: Wire alu32.\Result [16] is used but has no driver.
Warning: Wire alu32.\Result [15] is used but has no driver.
Warning: Wire alu32.\Result [14] is used but has no driver.
Warning: Wire alu32.\Result [13] is used but has no driver.
Warning: Wire alu32.\Result [12] is used but has no driver.
Warning: Wire alu32.\Result [11] is used but has no driver.
Warning: Wire alu32.\Result [10] is used but has no driver.
Warning: Wire alu32.\Result [9] is used but has no driver.
Warning: Wire alu32.\Result [8] is used but has no driver.
Warning: Wire alu32.\Result [7] is used but has no driver.
Warning: Wire alu32.\Result [6] is used but has no driver.
Warning: Wire alu32.\Result [5] is used but has no driver.
Warning: Wire alu32.\Result [4] is used but has no driver.
Warning: Wire alu32.\Result [3] is used but has no driver.
Warning: Wire alu32.\Result [2] is used but has no driver.
Warning: Wire alu32.\Result [1] is used but has no driver.
Warning: Wire alu32.\Result [0] is used but has no driver.
Found and reported 64 problems.

29. Printing statistics.

=== alu32 ===

   Number of wires:                489
   Number of wire bits:            616
   Number of public wires:           5
   Number of public wire bits:     132
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                548
     sky130_fd_sc_hd__a2111o_2      22
     sky130_fd_sc_hd__a211o_2        4
     sky130_fd_sc_hd__a21bo_2        3
     sky130_fd_sc_hd__a21o_2        14
     sky130_fd_sc_hd__a21oi_2        7
     sky130_fd_sc_hd__a221o_2        4
     sky130_fd_sc_hd__a22o_2        15
     sky130_fd_sc_hd__a2bb2o_2       3
     sky130_fd_sc_hd__a2bb2oi_2     11
     sky130_fd_sc_hd__a31o_2         2
     sky130_fd_sc_hd__a31oi_2        1
     sky130_fd_sc_hd__a32o_2         3
     sky130_fd_sc_hd__a41o_2         1
     sky130_fd_sc_hd__buf_1         33
     sky130_fd_sc_hd__buf_2         31
     sky130_fd_sc_hd__inv_2        102
     sky130_fd_sc_hd__mux2_1        65
     sky130_fd_sc_hd__nand2_2        3
     sky130_fd_sc_hd__nor2_2        14
     sky130_fd_sc_hd__nor3_2         2
     sky130_fd_sc_hd__nor4_2         2
     sky130_fd_sc_hd__o2111a_2       1
     sky130_fd_sc_hd__o2111ai_2     13
     sky130_fd_sc_hd__o211a_2        4
     sky130_fd_sc_hd__o21a_2        35
     sky130_fd_sc_hd__o21ai_2       23
     sky130_fd_sc_hd__o221ai_2      32
     sky130_fd_sc_hd__o22a_2        24
     sky130_fd_sc_hd__o22ai_2        2
     sky130_fd_sc_hd__o2bb2a_2      19
     sky130_fd_sc_hd__o2bb2ai_2      1
     sky130_fd_sc_hd__o32a_2         2
     sky130_fd_sc_hd__or2_2         24
     sky130_fd_sc_hd__or3_2         11
     sky130_fd_sc_hd__or4_2         13
     sky130_fd_sc_hd__or4b_2         2

   Chip area for module '\alu32': 4663.222400

30. Executing Verilog backend.
Dumping module `\alu32'.

Warnings: 64 unique messages, 64 total
End of script. Logfile hash: fea23dca89, CPU: user 3.67s system 0.10s, MEM: 45.29 MB peak
Yosys 0.9+4052 (git sha1 d061b0e, gcc 8.3.1 -fPIC -Os)
Time spent: 33% 2x abc (1 sec), 23% 4x stat (1 sec), ...
